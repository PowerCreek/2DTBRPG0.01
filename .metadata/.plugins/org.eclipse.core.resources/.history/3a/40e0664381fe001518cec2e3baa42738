package Base;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferStrategy;

public abstract class BasicGame implements Runnable{

	private BufferStrategy buffer;
	
	private Thread game;
	private boolean running = false;
	public static Dimension size = new Dimension(650,550);
	public GameWindow gamewindow;
	private String title = "Game Tutorial Test";
	
	public BasicGame(){
		gamewindow = new GameWindow(this);	
	}
	
	public void setBuffer(BufferStrategy buffer){
		this.buffer = buffer;
	}
	
	@Override
	public void run(){
		
		Display.getDisplay().addGame(this);
		initiate();
		
		while(running){
			
			do{
				do{
					
					if(!BasicGame.size.equals(gamewindow.canvas.getSize())){
						BasicGame.size = gamewindow.canvas.getSize();
					}
					
					Graphics2D g = (Graphics2D) buffer.getDrawGraphics();
					g.setColor(Color.black);
					g.fillRect(0, 0,  size.width, size.height);
					gamewindow.setTitle(title);
					g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
					update();
					render(g);
					g.dispose();
					buffer.show();
					
					

				}while(buffer.contentsRestored());
			}while(buffer.contentsLost());
			
			try{
				Thread.sleep(10);
			}catch(InterruptedException e){
				e.printStackTrace();
			}
		}
	}
	
	public void createWindow(){
		if(!isRunning()){
			gamewindow.createWindow();
		}
	}
	
	public abstract void initiate();
	public abstract void render(Graphics2D g);
	public abstract void update();
	

	public void start(){
		if(isRunning()){
			return;
		}
		game = new Thread(this);
		running = true;
		game.start();
	}
	
	public void stop(){
		
		if(!isRunning()){
			return;
		}
		running = false;
		try{
			game.join();
		}catch(InterruptedException e){
			e.printStackTrace();
			System.exit(0);
		}
	}
	
	public boolean isRunning(){
		return running;
	}
	
}
